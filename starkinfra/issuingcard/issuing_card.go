package issuingcard

import (
	"encoding/json"
	Error "github.com/starkinfra/core-go/starkcore/error"
	"github.com/starkinfra/core-go/starkcore/user/user"
	IssuingRule "github.com/starkinfra/sdk-go/starkinfra/issuingrule"
	"github.com/starkinfra/sdk-go/starkinfra/utils"
	"time"
)

//	IssuingCard struct
//
//	The IssuingCard struct displays the information of the cards created in your Workspace.
//	Sensitive information will only be returned when the "expand" parameter is used, to avoid security concerns.
//
//	Parameters (required):
//	- HolderName [string]: Card holder name. ex: "Tony Stark"
//	- HolderTaxId [string]: Card holder tax ID. ex: "012.345.678-90"
//	- HolderExternalId [string]: Card holder unique id, generated by the user to avoid duplicated holders. ex: "my-entity/123"
//
//	Parameters (optional):
//	- DisplayName [string, default nil]: Card displayed name. ex: "ANTHONY STARK"
//	- Rules [slice of IssuingRule struct, default nil]: [EXPANDABLE] Slice of card spending rules.
//	- ProductId [string, default None]: Card product ID to which the card is bound. ex: "53810200"
//	- Tags [slice of strings, default nil]: Slice of strings for tagging. ex: []string{"travel", "food"}
//	- StreetLine1 [string, default sub-issuer street line 1]: Card holder main address. ex: "Av. Paulista, 200"
//	- StreetLine2 [string, default sub-issuer street line 2]: Card holder address complement. ex: "Apto. 123"
//	- District [string, default sub-issuer district]: Card holder address district / neighbourhood. ex: "Bela Vista"
//	- City [string, default sub-issuer city]: Card holder address city. ex: "Rio de Janeiro"
//	- StateCode [string, default sub-issuer state code]: Card holder address state. ex: "GO"
//	- ZipCode [string, default sub-issuer zip code]: Card holder address zip code. ex: "01311-200"
//
//	Attributes (return-only):
//	- Id [string]: Unique id returned when IssuingCard is created. ex: "5656565656565656"
//	- HolderId [string]: Card holder unique id. ex: "5656565656565656"
//	- Type [string]: Card type. ex: "virtual"
//	- Status [string]: Current IssuingCard status. ex: "active", "blocked", "canceled", "expired".
//	- Number [string]: [EXPANDABLE] Masked card number. Expand to unmask the value. ex: "123".
//	- SecurityCode [string]: [EXPANDABLE] Masked card verification value (cvv). Expand to unmask the value. ex: "123".
//	- Expiration [time.Time]: [EXPANDABLE] Masked card expiration datetime. Expand to unmask the value.
//	- Updated [time.Time]: Latest update datetime for the IssuingCard. ex: time.Date(2020, 3, 10, 10, 30, 10, 0, time.UTC),
//	- Created [time.Time]: Creation datetime for the IssuingCard. ex: time.Date(2020, 3, 10, 10, 30, 10, 0, time.UTC),

type IssuingCard struct {
	HolderName       string                    `json:",omitempty"`
	HolderTaxId      string                    `json:",omitempty"`
	HolderExternalId string                    `json:",omitempty"`
	DisplayName      string                    `json:",omitempty"`
	Rules            []IssuingRule.IssuingRule `json:",omitempty"`
	ProductId        string                    `json:",omitempty"`
	Tags             []string                  `json:",omitempty"`
	StreetLine1      string                    `json:",omitempty"`
	StreetLine2      string                    `json:",omitempty"`
	District         string                    `json:",omitempty"`
	City             string                    `json:",omitempty"`
	StateCode        string                    `json:",omitempty"`
	ZipCode          string                    `json:",omitempty"`
	Id               string                    `json:",omitempty"`
	HolderId         string                    `json:",omitempty"`
	Type             string                    `json:",omitempty"`
	Status           string                    `json:",omitempty"`
	Number           string                    `json:",omitempty"`
	SecurityCode     string                    `json:",omitempty"`
	Expiration       string                    `json:",omitempty"`
	Updated          *time.Time                `json:",omitempty"`
	Created          *time.Time                `json:",omitempty"`
}

var object IssuingCard
var objects []IssuingCard
var resource = map[string]string{"name": "IssuingCard"}

func Create(cards []IssuingCard, expand map[string]interface{}, user user.User) ([]IssuingCard, Error.StarkErrors) {
	//	Create IssuingCards
	//
	//	Send a slice of IssuingCard structs for creation at the Stark Infra API
	//
	//	Parameters (required):
	//	- cards [slice of IssuingCard structs]: Slice of IssuingCard structs to be created in the API
	//
	//	Parameters (optional):
	//	- expand [slice of strings, default nil]: Fields to expand information. ex: []string{"rules", "securityCode", "number", "expiration"}
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkinfra.User was set before function call
	//
	//	Return:
	//	- slice of IssuingCard structs with updated attributes
	create, err := utils.Multi(resource, cards, expand, user)
	unmarshalError := json.Unmarshal(create, &cards)
	if unmarshalError != nil {
		return cards, err
	}
	return cards, err
}

func Get(id string, expand map[string]interface{}, user user.User) (IssuingCard, Error.StarkErrors) {
	//	Retrieve a specific IssuingCards by its id
	//
	// 	Receive a single IssuingCard struct previously created in the Stark Infra API by its id
	//
	//  Parameters (required):
	//  - id [string]: Struct unique id. ex: "5656565656565656"
	//
	// 	Parameters (optional):
	//  - expand [slice of strings, default nil]: Fields to expand information. ex: []string{"rules", "securityCode", "number", "expiration"}
	//  - user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkinfra.User was set before function call.
	//
	// 	Return:
	//  - IssuingCard struct that corresponds to the given id.
	get, err := utils.Get(resource, id, expand, user)
	unmarshalError := json.Unmarshal(get, &object)
	if unmarshalError != nil {
		return object, err
	}
	return object, err
}

func Query(params map[string]interface{}, user user.User) chan IssuingCard {
	//	Retrieve IssuingCard structs
	//
	//	Receive a channel of IssuingCards structs previously created in the Stark Infra API
	//
	//	Parameters (optional):
	//  - params [map[string]interface{}, default nil]: map of parameters for the query
	//		- limit [int, default nil]: Maximum number of structs to be retrieved. Unlimited if nil. ex: 35
	//		- ids [slice of strings, default nil]: Slice of ids to filter retrieved structs. ex: []string{"5656565656565656", "4545454545454545"}
	//		- after [string, default nil]: Date filter for structs created only after specified date.  ex: "2022-11-10"
	//		- before [string, default nil]: Date filter for structs created only before specified date.  ex: "2022-11-10"
	//		- status [slice of strings, default nil]: Filter for status of retrieved structs. ex: []string{"active", "blocked", "canceled", "expired"}
	//		- types [slice of strings, default nil]: Card type. ex: []string{"virtual"}
	//		- holderIds [slice of strings, default nil]: Card holder IDs. ex: []string{"5656565656565656", "4545454545454545"}
	//		- tags [slice of strings, default nil]: Tags to filter retrieved structs. ex: []string{"tony", "stark"}
	//		- expand [slice of strings, default nil]: Fields to expand information. ex: []string{"rules", "securityCode", "number", "expiration"}
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkinfra.User was set before function call
	//
	//	Return:
	//	- channel of IssuingCard structs with updated attributes
	cards := make(chan IssuingCard)
	query := utils.Query(resource, params, user)
	go func() {
		for content := range query {
			contentByte, _ := json.Marshal(content)
			err := json.Unmarshal(contentByte, &object)
			if err != nil {
				print(err)
			}
			cards <- object
		}
		close(cards)
	}()
	return cards
}

func Page(params map[string]interface{}, user user.User) ([]IssuingCard, string, Error.StarkErrors) {
	//	Retrieve paged IssuingCards
	//
	//	Receive a slice of up to 100 IssuingCard structs previously created in the Stark Infra API and the cursor to the next page.
	//	Use this function instead of query if you want to manually page your requests.
	//
	//	Parameters (optional):
	//  - params [map[string]interface{}, default nil]: map of parameters for the query
	//		- cursor [string, default nil]: Cursor returned on the previous page function call
	//		- limit [int, default 100]: Maximum number of structs to be retrieved. Max = 100. ex: 35
	//		- ids [slice of strings, default nil]: Slice of ids to filter retrieved structs. ex: []string{"5656565656565656", "4545454545454545"}
	//		- after [string, default nil]: Date filter for structs created only after specified date.  ex: "2022-11-10"
	//		- before [string, default nil]: Date filter for structs created only before specified date.  ex: "2022-11-10"
	//		- status [slice of strings, default nil]: Filter for status of retrieved structs. ex: []string{"active", "blocked", "canceled", "expired"}
	//		- types [slice of strings, default nil]: Card type. ex: []string{"virtual"}
	//		- holderIds [slice of strings, default nil]: Card holder IDs. ex: []string{"5656565656565656", "4545454545454545"}
	//		- tags [slice of strings, default nil]: Tags to filter retrieved structs. ex: []string{"tony", "stark"}
	//		- expand [slice of strings, default nil]: Fields to expand information. ex: []string{"rules", "securityCode", "number", "expiration"}
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkinfra.User was set before function call
	//
	//	Return:
	//	- slice of IssuingCards structs with updated attributes
	//	- cursor to retrieve the next page of IssuingCards structs
	page, cursor, err := utils.Page(resource, params, user)
	unmarshalError := json.Unmarshal(page, &objects)
	if unmarshalError != nil {
		return objects, cursor, err
	}
	return objects, cursor, err
}

func Update(id string, patchData map[string]interface{}, user user.User) (IssuingCard, Error.StarkErrors) {
	//	Update IssuingCard entity
	//
	//	Update an IssuingCard by passing its id.
	//
	//	Parameters (required):
	//	- id [string]: IssuingCard id. ex: '5656565656565656'
	//  - patchData [map[string]interface{}]: map containing the attributes to be updated. ex: map[string]interface{}{"amount": 9090}
	//		Parameters (optional):
	//		- status [string, default nil]: You may block the IssuingCard by passing 'blocked' or activate by passing 'active' in the status
	//		- pin [string, default nil]: You may unlock your physical card by passing its PIN. This is also the PIN you use to authorize a purchase.
	//		- displayName [string, default nil]: Card displayed name
	//		- rules [slice of maps, default nil]: Slice of maps with "amount": int, "currencyCode": string, "id": string, "interval": string, "name": string pairs.
	//		- tags [slice of strings]: Slice of strings for tagging
	//
	//	Parameters (optional):
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkinfra.User was set before function call
	//
	//	Return:
	//	- target IssuingCard with updated attributes
	update, err := utils.Patch(resource, id, patchData, user)
	unmarshalError := json.Unmarshal(update, &object)
	if unmarshalError != nil {
		return object, err
	}
	return object, err
}

func Cancel(id string, user user.User) (IssuingCard, Error.StarkErrors) {
	//	Cancel an IssuingCard entity
	//
	//	Cancel an IssuingCard entity previously created in the Stark Infra API
	//
	//	Parameters (required):
	//	- id [string]: IssuingCard unique id. ex: "5656565656565656"
	//	- user [Organization/Project struct, default nil]: Organization or Project struct. Not necessary if starkinfra.User was set before function call
	//
	//	Return:
	//	- canceled IssuingCard struct
	deleted, err := utils.Delete(resource, id, user)
	unmarshalError := json.Unmarshal(deleted, &object)
	if unmarshalError != nil {
		return object, err
	}
	return object, err
}
